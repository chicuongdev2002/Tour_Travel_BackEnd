package vn.edu.iuh.fit.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import vn.edu.iuh.fit.dto.TourCardDTO;import vn.edu.iuh.fit.entity.Departure;import vn.edu.iuh.fit.entity.Tour;import vn.edu.iuh.fit.service.DepartureService;import vn.edu.iuh.fit.service.ImageService;import vn.edu.iuh.fit.service.TourPricingService;import vn.edu.iuh.fit.service.TourService;import java.time.LocalDateTime;import java.util.ArrayList;import java.util.List;import java.util.UUID;@RestController@RequestMapping("/api/departures")public class DepartureController {    @Autowired    private DepartureService departureService;    @Autowired    private TourService tourService;    @Autowired    private TourPricingService tourPricingService;    @PostMapping    public ResponseEntity<Departure> createDeparture(@RequestBody Departure departure) {        Departure createdDeparture = departureService.create(departure);        return new ResponseEntity<>(createdDeparture, HttpStatus.CREATED);    }    @GetMapping("/{id}")    public ResponseEntity<Departure> getDepartureById(@PathVariable("id") long id) {        Departure departure = departureService.getById(id);        return departure != null                ? new ResponseEntity<>(departure, HttpStatus.OK)                : new ResponseEntity<>(HttpStatus.NOT_FOUND);    }    @GetMapping    public ResponseEntity<List<Departure>> getAllDeparture() {        List<Departure> departures = departureService.getAll();        return new ResponseEntity<>(departures, HttpStatus.OK);    }    @PutMapping("/{id}")    public ResponseEntity<Departure> updateDeparture(@PathVariable("id") long id, @RequestBody Departure departure) {        if (id != departure.getDepartureId()) {            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);        }        departureService.update(departure);        return new ResponseEntity<>(departure, HttpStatus.OK);    }    @DeleteMapping("/{id}")    public ResponseEntity<Void> deleteDeparture(@PathVariable("id") long id) {        departureService.delete(id);        return new ResponseEntity<>(HttpStatus.NO_CONTENT);    }    @GetMapping("/inDay")    public ResponseEntity<List<TourCardDTO>> getListDepartureInDay(){        List<Tour> lst = new ArrayList<>();        for (Departure departure : departureService.getListDepartureInDay()) {            if(departure.getStartDate().isAfter(LocalDateTime.now().plusDays(3)) && !lst.contains(departure.getTour()))                lst.add(departure.getTour());        }        return ResponseEntity.ok(tourService.convertTourToTourCardDTO(lst));    }}