package vn.edu.iuh.fit.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import vn.edu.iuh.fit.entity.Account;import vn.edu.iuh.fit.entity.User;import vn.edu.iuh.fit.exception.AccountNotFoundException;import vn.edu.iuh.fit.exception.InvalidPasswordException;import vn.edu.iuh.fit.service.AccountService;import java.util.UUID;@RestController@RequestMapping("/api/accounts")public class AccountController {    @Autowired    private AccountService accountService;    @GetMapping("/email/{username}")    public ResponseEntity<String> getEmailByUsername(@PathVariable String username) {        String email = accountService.getEmailByUsername(username);        if (email != null) {            return ResponseEntity.ok(email);        } else {            return ResponseEntity.notFound().build();        }    }    @GetMapping("/exists/{username}")    public ResponseEntity<Boolean> checkAccountExists(@PathVariable String username) {        boolean exists = accountService.existsByUsername(username);        return ResponseEntity.ok(exists);    }    @PostMapping("/register")    public ResponseEntity<User> register(@RequestParam String username,                                         @RequestParam String password,                                         @RequestBody User user) {        User newUser = accountService.register(username, password, user);        return new ResponseEntity<>(newUser, HttpStatus.CREATED);    }    @PostMapping("/login")    public ResponseEntity<?> login(@RequestParam String username, @RequestParam String password) {        try {            Long userID = accountService.login(username, password);            return ResponseEntity.ok(userID); // Trả về userID nếu đăng nhập thành công        } catch (AccountNotFoundException ex) {            // Nếu tài khoản không tồn tại, trả về 404            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());        } catch (InvalidPasswordException ex) {            // Nếu mật khẩu không đúng, trả về 401            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(ex.getMessage());        } catch (Exception ex) {            // Xử lý các lỗi khác, trả về phản hồi 500            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Đã xảy ra lỗi hệ thống.");        }    }    //    @DeleteMapping("/{accountId}")//    public ResponseEntity<Void> deleteAccount(@PathVariable UUID accountId) {//        accountService.deleteAccount(accountId);//        return new ResponseEntity<>(HttpStatus.NO_CONTENT);//    }////    @PutMapping("/{accountId}/password")//    public ResponseEntity<Void> changePassword(@PathVariable UUID accountId, @RequestParam String newPassword) {//        accountService.changePassword(accountId, newPassword);//        return new ResponseEntity<>(HttpStatus.NO_CONTENT);//    }//    @PostMapping("/reset-password")    public ResponseEntity<Void> resetPassword(@RequestParam String email, @RequestParam String newPassword) {        try {            accountService.resetPassword(email, newPassword);            return ResponseEntity.status(HttpStatus.NO_CONTENT).build();        } catch (RuntimeException e) {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);        }    }}