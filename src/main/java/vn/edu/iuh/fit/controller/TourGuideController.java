package vn.edu.iuh.fit.controller;import lombok.RequiredArgsConstructor;import org.springframework.data.domain.Page;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import vn.edu.iuh.fit.dto.TourAssignmentDTO;import vn.edu.iuh.fit.dto.TourGuideKPIDTO;import vn.edu.iuh.fit.dto.TourGuideUpdateDTO;import vn.edu.iuh.fit.dto.request.TourGuideAssignmentRequestDTO;import vn.edu.iuh.fit.dto.request.UpdateStatusRequest;import vn.edu.iuh.fit.entity.TourGuide;import vn.edu.iuh.fit.entity.TourGuideAssignment;import vn.edu.iuh.fit.service.TourGuideService;import vn.edu.iuh.fit.enums.AssignStatus;import java.util.List;@RestController@RequestMapping("/api/tour-guides")@RequiredArgsConstructorpublic class TourGuideController {    private final TourGuideService tourGuideService;    @GetMapping    public List<TourGuide> getAllTourGuides() {        return tourGuideService.getAllTourGuides();    }    @GetMapping("/{guideId}/assignments")    public ResponseEntity<List<TourAssignmentDTO>> getGuideAssignments(            @PathVariable Long guideId,            @RequestParam(required = false) AssignStatus status    ) {        return ResponseEntity.ok(tourGuideService.getGuideAssignments(guideId, status));    }    @GetMapping("/assignments-all")    public ResponseEntity<Page<TourAssignmentDTO>> getAllAssignments(            @RequestParam(defaultValue = "0") int page,            @RequestParam(defaultValue = "10") int size) {        Page<TourAssignmentDTO> response = tourGuideService.getAllAssignments(page, size);        return ResponseEntity.ok(response);    }    @PutMapping("/{guideId}/assignments/{departureId}/status")    public ResponseEntity<Void> updateAssignmentStatus(            @PathVariable Long guideId,            @PathVariable Long departureId,            @RequestBody UpdateStatusRequest request    ) {        AssignStatus status = request.getStatus();        tourGuideService.updateAssignmentStatus(guideId, departureId, status);        return ResponseEntity.ok().build();    }    @GetMapping("/{userId}/kpi")    public TourGuideKPIDTO getKPI(@PathVariable long userId) {        return tourGuideService.getKPI(userId);    }    @PutMapping()    public ResponseEntity<Void> updateTourGuide(@RequestBody TourGuideUpdateDTO updateDTO) {        tourGuideService.updateTourGuide(updateDTO);        return ResponseEntity.noContent().build();    }    @PutMapping("/{guideId}/assignments/{departureId}")    public ResponseEntity<Void> updateTourAssignment(@PathVariable Long guideId,                                                     @PathVariable Long departureId,                                                     @RequestBody TourAssignmentDTO updateDTO) {        tourGuideService.updateTourAssignment(guideId, departureId, updateDTO);        return ResponseEntity.noContent().build();    }    @DeleteMapping("/{guideId}/assignments/{departureId}")    public ResponseEntity<Void> deleteTourAssignment(@PathVariable Long guideId,                                                     @PathVariable Long departureId) {        tourGuideService.deleteTourGuideAssignment(guideId, departureId);        return ResponseEntity.noContent().build();    }    @PostMapping("/assign-tour-guide")    public ResponseEntity<List<TourGuideAssignment>> assignTourGuides(@RequestBody TourGuideAssignmentRequestDTO requestDTO) {        List<TourGuideAssignment> assignments = tourGuideService.assignTourGuide(requestDTO);        return ResponseEntity.ok(assignments);    }}