package vn.edu.iuh.fit.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import vn.edu.iuh.fit.dto.MonthlyReviewStatistics;import vn.edu.iuh.fit.dto.TourReviewStatistics;import vn.edu.iuh.fit.dto.UserReviewStatistics;import vn.edu.iuh.fit.dto.request.ReviewRequest;import vn.edu.iuh.fit.dto.respone.ReviewResponseDTO;import vn.edu.iuh.fit.entity.Review;import vn.edu.iuh.fit.service.ReviewService;import java.util.List;@RestController@RequestMapping("/api/reviews")public class ReviewController {    @Autowired    private ReviewService reviewService;    @GetMapping("/statistics-tour-review")    public List<TourReviewStatistics> getAllTourReviewStatistics() {        return reviewService.getAllTourReviewStatistics();    }    @GetMapping("/monthly-statistics")    public List<MonthlyReviewStatistics> getMonthlyReviewStatistics() {        return reviewService.getMonthlyReviewStatistics();    }    @GetMapping("/user-statistics")    public List<UserReviewStatistics> getUserReviewStatistics() {        return reviewService.getUserReviewStatistics();    }    @PostMapping    public ResponseEntity<ReviewResponseDTO> addReview(@RequestBody ReviewRequest reviewRequest) {        try {            ReviewResponseDTO savedReview = reviewService.addReview(reviewRequest);            return new ResponseEntity<>(savedReview, HttpStatus.CREATED);        } catch (IllegalArgumentException e) {            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);        }    }    @PutMapping("/{id}")    public ResponseEntity<ReviewResponseDTO> editReview(@PathVariable Long id, @RequestBody ReviewRequest reviewRequest) {        try {            ReviewResponseDTO existingReview = reviewService.getReviewById(id);            if (existingReview == null) {                return new ResponseEntity<>(HttpStatus.NOT_FOUND);            }            ReviewResponseDTO updatedReview = reviewService.updateReview(reviewRequest, id);            return new ResponseEntity<>(updatedReview, HttpStatus.OK);        } catch (IllegalArgumentException e) {            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);        }    }    @DeleteMapping("/{id}")    public ResponseEntity<Void> deleteReview(@PathVariable Long id) {        try {            reviewService.deleteReview(id);            return new ResponseEntity<>(HttpStatus.NO_CONTENT);        } catch (IllegalArgumentException e) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        }    }}