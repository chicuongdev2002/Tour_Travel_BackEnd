package vn.edu.iuh.fit.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import vn.edu.iuh.fit.dto.TourDetailDTO;import vn.edu.iuh.fit.dto.TourSummaryDTO;import vn.edu.iuh.fit.entity.Tour;import vn.edu.iuh.fit.service.TourService;import java.io.File;import java.io.IOException;import java.math.BigDecimal;import java.util.HashSet;import java.util.List;import java.util.UUID;@RestController@RequestMapping("/api/tours")public class TourController {    private TourService tourService;    @Autowired    public TourController(TourService tourService) {        this.tourService = tourService;    }    @PostMapping    public ResponseEntity<Tour> createTour(@RequestBody Tour tour) {        Tour createdTour = tourService.create(tour);        return new ResponseEntity<>(createdTour, HttpStatus.CREATED);    }//    @GetMapping("/{id}")//    public ResponseEntity<Tour> getTourById(@PathVariable("id") UUID id) {//        Tour tour = tourService.getById(id);//        return tour != null//                ? new ResponseEntity<>(tour, HttpStatus.OK)//                : new ResponseEntity<>(HttpStatus.NOT_FOUND);//    }//@GetMapping("/all")    public ResponseEntity<List<Tour>> getAllTours() {        List<Tour> tours = tourService.getAll();        return new ResponseEntity<>(tours, HttpStatus.OK);    }@GetMappingpublic ResponseEntity<Page<TourSummaryDTO>> getTours(        @RequestParam(defaultValue = "0") int page,        @RequestParam(defaultValue = "10") int size,        @RequestParam(required = false, defaultValue = "0") BigDecimal minPrice,        @RequestParam(required = false, defaultValue = "10000") BigDecimal maxPrice) {    Page<TourSummaryDTO> tours = tourService.getTours(page, size, minPrice, maxPrice);    return ResponseEntity.ok(tours);}    @GetMapping("/{id}")    public ResponseEntity<TourDetailDTO> getTourById(@PathVariable UUID id) {        TourDetailDTO tour = tourService.getTourById(id);        return ResponseEntity.ok(tour);    }    @PutMapping("/{id}")    public ResponseEntity<Tour> updateTour(@PathVariable("id") UUID id, @RequestBody Tour tour) {        if (!id.equals(tour.getTourId())) {            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);        }        tourService.update(tour);        return new ResponseEntity<>(tour, HttpStatus.OK);    }    @DeleteMapping("/{id}")    public ResponseEntity<Void> deleteTour(@PathVariable("id") UUID id) {        tourService.delete(id);        return new ResponseEntity<>(HttpStatus.NO_CONTENT);    }    @PostMapping("/upload")    public ResponseEntity<String> uploadImage(            @RequestParam("file") MultipartFile file,            @RequestParam("tourId") UUID tourId) {        try {            TourDetailDTO tourDetail = tourService.getTourById(tourId);            Tour tour = tourService.convertDtoToEntity(tourDetail);            // Kiểm tra và khởi tạo tập hợp            if (tour.getImages() == null) {                tour.setImages(new HashSet<>());            }            File tempFile = tourService.convertMultiPartToFile(file);            String fileUrl = tourService.uploadImageToAWS(tempFile, tour);            return ResponseEntity.ok(fileUrl);        } catch (IOException e) {            return ResponseEntity.status(500).body("Error uploading image: " + e.getMessage());        }    }}