package vn.edu.iuh.fit.service.token;import io.jsonwebtoken.Claims;import io.jsonwebtoken.ExpiredJwtException;import jakarta.servlet.FilterChain;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;import org.springframework.stereotype.Component;import org.springframework.web.filter.OncePerRequestFilter;import vn.edu.iuh.fit.service.UserService;import vn.edu.iuh.fit.service.token.TokenService;import java.io.IOException;import java.util.List;@Componentpublic class JwtAuthenticationFilter extends OncePerRequestFilter {    @Autowired    private TokenService tokenService;    @Autowired    private UserService userService;    @Override    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)            throws ServletException, IOException {        try {            String authHeader = request.getHeader("Authorization");            if (authHeader == null || !authHeader.startsWith("Bearer ")) {                filterChain.doFilter(request, response);                return;            }            String jwt = authHeader.substring(7);            Claims claims = tokenService.validateToken(jwt); // Lấy claims từ token            String email = claims.getSubject();            if (email != null && SecurityContextHolder.getContext().getAuthentication() == null) {                UserDetails userDetails = userService.loadUserByUsername(email);                // Lấy vai trò từ claims                String role = claims.get("role", String.class);                List<GrantedAuthority> authorities = List.of(() -> "ROLE_" + role); // Thêm tiền tố ROLE_                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(                        userDetails,                        null,                        authorities // Sử dụng authorities từ claims                );                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));                SecurityContextHolder.getContext().setAuthentication(authToken);            }        } catch (ExpiredJwtException e) {            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);            response.getWriter().write("Token expired");            return;        } catch (Exception e) {            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);            response.getWriter().write("Invalid token");            return;        }        filterChain.doFilter(request, response);    }}