package vn.edu.iuh.fit.service.implement;import jakarta.transaction.Transactional;import lombok.RequiredArgsConstructor;import org.apache.commons.lang3.StringUtils;import org.apache.commons.lang3.math.NumberUtils;import org.json.JSONArray;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.http.ResponseEntity;import org.springframework.messaging.simp.SimpMessagingTemplate;import org.springframework.stereotype.Service;import vn.edu.iuh.fit.dto.*;import vn.edu.iuh.fit.dto.request.TourGuideAssignmentRequestDTO;import vn.edu.iuh.fit.entity.*;import vn.edu.iuh.fit.enums.AccountRole;import vn.edu.iuh.fit.enums.AssignStatus;import vn.edu.iuh.fit.exception.ResourceNotFoundException;import vn.edu.iuh.fit.repositories.*;import vn.edu.iuh.fit.service.TourGuideService;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.net.URLEncoder;import java.nio.charset.StandardCharsets;import java.text.Normalizer;import java.time.LocalDate;import java.time.LocalDateTime;import java.util.*;import java.util.stream.Collectors;@Service@RequiredArgsConstructor@Transactionalpublic class TourGuideServiceImpl extends AbstractCrudService<TourGuide, Long> implements TourGuideService {    @Autowired    private TourGuideRepository tourGuideRepository;    @Autowired    private TourGuideAssignmentRepository tourGuideAssignmentRepository;    @Override    protected JpaRepository<TourGuide, Long> getRepository() {        return tourGuideRepository;    }    private final TourGuideAssignmentRepository assignmentRepository;    @Autowired    private DepartureRepository departureRepository;    @Autowired    private SimpMessagingTemplate messagingTemplate;    @Autowired    private BookingRepository bookingRepository;    public List<TourAssignmentDTO> getGuideAssignments(Long guideId, AssignStatus status) {        TourGuide guide = tourGuideRepository.findById(guideId)                .orElseThrow(() -> new ResourceNotFoundException("Tour guide not found"));        List<TourGuideAssignment> assignments;        if (status != null) {            assignments = assignmentRepository.findByTourGuideUserIdAndStatus(guideId, status);        } else {            assignments = assignmentRepository.findByTourGuideUserId(guideId);        }        return assignments.stream()                .map(this::convertToAssignmentDTO)                .sorted(Comparator.comparing(TourAssignmentDTO::getAssignmentDate).reversed())                .collect(Collectors.toList());    }    public Page<TourAssignmentDTO> getAllAssignments(int page, int size) {        Pageable pageable = PageRequest.of(page, size);        Page<TourGuideAssignment> assignmentPage = assignmentRepository.findAllByOrderByAssignmentDateDesc(pageable);        return assignmentPage.map(this::convertToAssignmentDTO);    }    @Transactional    public void updateAssignmentStatus(Long guideId, Long departureId, AssignStatus status) {        TourGuideAssignment assignment = assignmentRepository                .findByTourGuideUserIdAndDepartureDepartureId(guideId, departureId)                .orElseThrow(() -> new ResourceNotFoundException("Không tìm thấy phân công công việc với hướng dẫn viên có id: " + guideId + " và departureId: " + departureId));        if (assignment.getStatus() != AssignStatus.TODO) {            throw new IllegalStateException("Không thể cập nhật trạng thái của phân công công việc đã chấp nhận hoặc đã hủy");        }        // Cập nhật trạng thái của phân công        assignment.setStatus(status);        TourGuideAssignment updatedAssignment = assignmentRepository.save(assignment);        // Nếu trạng thái là ACCEPT, xóa các phân công khác cho chuyến đi này        if (status == AssignStatus.ACCEPT) {            // Xóa tất cả phân công khác cho chuyến đi này, ngoại trừ bản ghi vừa cập nhật            List<TourGuideAssignment> otherAssignments = assignmentRepository.findByDeparture_DepartureId(departureId);            for (TourGuideAssignment otherAssignment : otherAssignments) {                // So sánh trực tiếp các giá trị long                if (otherAssignment.getTourGuide().getUserId() != guideId) {                    assignmentRepository.delete(otherAssignment);                }            }        }        TourAssignmentDTO updatedDTO = convertToAssignmentDTO(updatedAssignment);    }    public TourGuideKPIDTO getKPI(long userId) {        Optional<TourGuide> tourGuideOpt = tourGuideRepository.findById(userId);        if (!tourGuideOpt.isPresent()) {            return createDefaultKPI(userId);        }        TourGuide tourGuide = tourGuideOpt.get();        TourGuideKPIDTO kpi = new TourGuideKPIDTO();        kpi.setUserId(tourGuide.getUserId());        kpi.setFullName(tourGuide.getFullName());        int totalAssignedTours = tourGuideAssignmentRepository.countByTourGuide(tourGuide);        kpi.setTotalAssignedTours(totalAssignedTours);        int todoTours = tourGuideAssignmentRepository.countTodoToursByTourGuide(tourGuide);        kpi.setTodoTours(todoTours);        int completeTours = tourGuideAssignmentRepository.countCompletedToursByTourGuide(tourGuide);        kpi.setCompletedTours(completeTours);        int acceptTours = tourGuideAssignmentRepository.countAcceptToursByTourGuide(tourGuide);        kpi.setAcceptTours(acceptTours);        int rejectTours = tourGuideAssignmentRepository.countRejectToursByTourGuide(tourGuide);        kpi.setRejectTours(rejectTours);        Float result = tourGuideAssignmentRepository.findAverageRatingByTourGuide(tourGuide);        float averageRating = (result != null) ? result : 0.0f;        kpi.setAverageRating(averageRating);        int satisfactoryReviews = assignmentRepository.countSatisfactoryReviewsByTourGuide(tourGuide);        int totalReviews = assignmentRepository.countTotalReviewsByTourGuide(tourGuide);        float satisfactionRate = (totalReviews > 0) ? ((float) satisfactoryReviews / totalReviews) * 100 : 0;        kpi.setSatisfactionRate(satisfactionRate);        float averageDuration = assignmentRepository.findAverageDurationByTourGuide(tourGuide);        kpi.setAverageDuration(averageDuration);        Integer td = assignmentRepository.countTotalDurationByTourGuide(tourGuide);        int totalDuration = (td != null) ? td : 0;        kpi.setTotalDuration(totalDuration);        int uniqueCustomers = assignmentRepository.countUniqueCustomersByTourGuide(tourGuide);        kpi.setUniqueCustomers(uniqueCustomers);        float cancellationRate = (totalAssignedTours > 0) ? ((float) rejectTours / totalAssignedTours) * 100 : 0;        kpi.setRejectRate(cancellationRate);        float acceptRate = (totalAssignedTours > 0) ? ((float) acceptTours / totalAssignedTours) * 100 : 0;        kpi.setAcceptRate(acceptRate);        float completeRate = (totalAssignedTours > 0 && acceptTours > 0)                ? ((float) completeTours / acceptTours) * 100                : 0;        kpi.setCompleteRate(completeRate);        List<Object[]> completedToursByType = assignmentRepository.countCompletedToursByType(tourGuide);        kpi.setCompletedToursByType(completedToursByType);        List<Object[]> reviews = assignmentRepository.findReviewsByTourGuide(tourGuide);        kpi.setCustomerFeedback(reviews);        return kpi;    }    private TourGuideKPIDTO createDefaultKPI(long userId) {        TourGuideKPIDTO defaultKPI = new TourGuideKPIDTO();        defaultKPI.setUserId(userId);        defaultKPI.setFullName("Not Found");        defaultKPI.setTotalAssignedTours(0);        defaultKPI.setTodoTours(0);        defaultKPI.setCompletedTours(0);        defaultKPI.setAcceptTours(0);        defaultKPI.setRejectTours(0);        defaultKPI.setAverageRating(0);        defaultKPI.setSatisfactionRate(0);        defaultKPI.setAverageDuration(0);        defaultKPI.setTotalDuration(0);        defaultKPI.setUniqueCustomers(0);        defaultKPI.setRejectRate(0);        defaultKPI.setAcceptRate(0);        defaultKPI.setCompleteRate(0);        defaultKPI.setCompletedToursByType(new ArrayList<>());        defaultKPI.setCustomerFeedback(new ArrayList<>());        return defaultKPI;    }    @Override   public TourGuideAssignmentStatisticsDTO getSystemAssignmentStatistics() {    int totalAssignments = tourGuideAssignmentRepository.countAllAssignments();    int totalAccepted = tourGuideAssignmentRepository.countAllAcceptedAssignments();    int totalRejected = tourGuideAssignmentRepository.countAllRejectedAssignments();    int totalCompleted = tourGuideAssignmentRepository.countTotalCompletedToursByTourGuide();    int totalTodo = tourGuideAssignmentRepository.countAlTodoAssignments();    float acceptanceRate = (totalAssignments > 0) ? (float) totalAccepted / totalAssignments * 100 : 0;    float rejectionRate = (totalAssignments > 0) ? (float) totalRejected / totalAssignments * 100 : 0;    float completionRate = (totalAccepted > 0) ? (float) totalCompleted / totalAccepted * 100 : 0;    float todoRate = (totalAssignments > 0) ? (float) totalTodo / totalAssignments * 100 : 0;    TourGuideAssignmentStatisticsDTO statistics = new TourGuideAssignmentStatisticsDTO();    statistics.setTotalAssignments(totalAssignments);    statistics.setTotalAccepted(totalAccepted);    statistics.setTotalRejected(totalRejected);    statistics.setTotalTodo(totalTodo);    statistics.setAcceptanceRate(acceptanceRate);    statistics.setRejectionRate(rejectionRate);    statistics.setCompletionRate(completionRate);    statistics.setTodoRate(todoRate);    return statistics;}    @Override    public List<TourGuideWorkingHoursDTO> getTotalWorkingHoursByTourGuides(LocalDateTime startDate, LocalDateTime endDate) {        List<Object[]> results = tourGuideAssignmentRepository.countTotalWorkingHoursByTourGuide(startDate, endDate);        List<TourGuideWorkingHoursDTO> workingHoursList = new ArrayList<>();        for (Object[] result : results) {            String guideName = (String) result[0];            Integer totalHours = ((Number) result[1]).intValue();            workingHoursList.add(new TourGuideWorkingHoursDTO(guideName, totalHours));        }        return workingHoursList;    }    private TourAssignmentDTO convertToAssignmentDTO(TourGuideAssignment assignment) {        Departure departure = assignment.getDeparture();        Tour tour = departure.getTour();        return TourAssignmentDTO.builder()                .departureId(departure.getDepartureId())                .tourName(tour.getTourName())                .startDate(departure.getStartDate())                .endDate(departure.getEndDate())                .status(assignment.getStatus())                .assignmentDate(assignment.getAssignmentDate())                .maxParticipants(departure.getMaxParticipants())                .availableSeats(departure.getAvailableSeats())                .guideName(assignment.getTourGuide().getFullName())                .guideId(assignment.getTourGuide().getUserId())                .isAttendance(assignment.isActive())                .build();    }    public List<TourGuide> getAllTourGuides() {        return tourGuideRepository.findAllByRole(AccountRole.TOURGUIDE);    }    public void updateTourGuide(TourGuideUpdateDTO updateDTO) {        TourGuide existingTourGuide = tourGuideRepository.findById(updateDTO.getUserId())                .orElseThrow(() -> new ResourceNotFoundException("Tour guide not found"));        existingTourGuide.setEmail(updateDTO.getEmail());        existingTourGuide.setFullName(updateDTO.getFullName());        existingTourGuide.setPhoneNumber(updateDTO.getPhoneNumber());        existingTourGuide.setExperienceYear(updateDTO.getExperienceYear());        existingTourGuide.getAddresses().clear();        List<AddressDTO> updatedAddresses = updateDTO.getAddresses();        if (updatedAddresses != null) {            for (AddressDTO updatedAddress : updatedAddresses) {                Address addressEntity = new Address();                addressEntity.setAddressId(updatedAddress.getAddressId());                addressEntity.setAddress(updatedAddress.getAddress());                addressEntity.setUser(existingTourGuide);                existingTourGuide.getAddresses().add(addressEntity);            }        }        tourGuideRepository.save(existingTourGuide);    }    @Transactional    public void updateTourAssignment(Long guideId, Long departureId, TourAssignmentDTO updateDTO) {        TourGuideAssignment assignment = tourGuideAssignmentRepository                .findByTourGuideUserIdAndDepartureDepartureId(guideId, departureId)                .orElseThrow(() -> new ResourceNotFoundException("Tour assignment not found for guideId: " + guideId + " and departureId: " + departureId));        if (updateDTO.getStatus() != null) {            assignment.setStatus(updateDTO.getStatus());        }        if (updateDTO.getDepartureId() != null) {            Departure newDeparture = departureRepository.findById(updateDTO.getDepartureId())                    .orElseThrow(() -> new ResourceNotFoundException("Departure not found for ID: " + updateDTO.getDepartureId()));            TourGuideAssignment newAssignment = new TourGuideAssignment();            newAssignment.setAssignmentDate(LocalDateTime.now());            newAssignment.setStatus(assignment.getStatus());            newAssignment.setDeparture(newDeparture);            newAssignment.setTourGuide(assignment.getTourGuide());            newAssignment.setActive(true);            tourGuideAssignmentRepository.save(newAssignment);            tourGuideAssignmentRepository.delete(assignment);        } else {            assignment.setAssignmentDate(LocalDateTime.now());            tourGuideAssignmentRepository.save(assignment);        }    }    @Transactional    public List<TourGuideAssignment> assignTourGuide(TourGuideAssignmentRequestDTO requestDTO) {        Departure departure = departureRepository.findById(requestDTO.getDepartureId())                .orElseThrow(() -> new ResourceNotFoundException("Không có chuyến đi với ID: " + requestDTO.getDepartureId()));        List<TourGuideAssignment> assignments = new ArrayList<>();        List<String> messages = new ArrayList<>(); // Để lưu thông báo trùng lặp        for (Long guideId : requestDTO.getGuideIds()) {            TourGuide tourGuide = tourGuideRepository.findById(guideId)                    .orElseThrow(() -> new ResourceNotFoundException("Hướng dẫn viên không tồn tại với ID: " + guideId));            // Kiểm tra xem hướng dẫn viên đã được phân công cho chuyến đi này chưa            Optional<TourGuideAssignment> existingAssignment = tourGuideAssignmentRepository                    .findByTourGuideUserIdAndDepartureDepartureId(guideId, departure.getDepartureId());            if (existingAssignment.isPresent()) {                TourGuideAssignment assignment = existingAssignment.get();                // Nếu trạng thái không phải là REJECT, không cho phép phân công lại                if (!assignment.getStatus().equals(AssignStatus.REJECT)) {                    messages.add("Hướng dẫn viên ID " + guideId + " đã được phân công cho chuyến đi ID " + departure.getDepartureId() + " với trạng thái " + assignment.getStatus());                    continue; // Bỏ qua phân công cho hướng dẫn viên này                }                // Nếu trạng thái là REJECT, có thể cập nhật phân công                assignment.setStatus(AssignStatus.TODO); // Hoặc trạng thái phù hợp khác                assignment.setAssignmentDate(LocalDateTime.now());                assignment.setActive(false);                assignments.add(tourGuideAssignmentRepository.save(assignment));                continue;            }            // Kiểm tra các phân công trước đó của hướng dẫn viên            List<TourGuideAssignment> previousAssignments = tourGuideAssignmentRepository.findByTourGuideUserId(guideId);            for (TourGuideAssignment previousAssignment : previousAssignments) {                Departure previousDeparture = previousAssignment.getDeparture();                if (previousDeparture.getEndDate().isAfter(departure.getStartDate())) {                    throw new IllegalStateException("Chuyến đi mới phải bắt đầu sau khi chuyến đi cũ kết thúc cho hướng dẫn viên ID " + guideId);                }            }            // Tạo phân công mới            TourGuideAssignment assignment = new TourGuideAssignment();            assignment.setDeparture(departure);            assignment.setTourGuide(tourGuide);            assignment.setStatus(AssignStatus.TODO);            assignment.setAssignmentDate(LocalDateTime.now());            assignments.add(tourGuideAssignmentRepository.save(assignment));        }        // Nếu có thông báo trùng lặp, ném một ngoại lệ hoặc trả về thông báo        if (!messages.isEmpty()) {            throw new IllegalStateException(String.join(", ", messages));        }        return assignments;    }    public void deleteTourGuideAssignment(Long guideId, Long departureId) {        TourGuideAssignment assignment = tourGuideAssignmentRepository                .findByTourGuideUserIdAndDepartureDepartureId(guideId, departureId)                .orElseThrow(() -> new ResourceNotFoundException("Không tìm thấy phân công công việc với hướng dẫn viên có id: " + guideId + " and departureId: " + departureId));        tourGuideAssignmentRepository.delete(assignment);    }    public List<TourScheduleDTO> getToursByGuide(Long tourGuideId) {        TourGuide tourGuide = tourGuideRepository.findById(tourGuideId)                .orElseThrow(() -> new ResourceNotFoundException("Tour guide not found"));        List<TourGuideAssignment> assignments = tourGuideAssignmentRepository.findByTourGuideUserId(tourGuideId);        if (assignments.isEmpty()) {            return Collections.emptyList();        }        List<TourScheduleDTO> tourSchedules = new ArrayList<>();        for (TourGuideAssignment assignment : assignments) {            if (assignment.getStatus()==AssignStatus.ACCEPT && assignment.getDeparture().isActive()) {                Tour tour = assignment.getDeparture().getTour();                List<TourScheduleDTO.CustomerDTO> customers = bookingRepository.findByDeparture(assignment.getDeparture()).stream()                        .filter(Booking::isActive)                        .map(booking -> new TourScheduleDTO.CustomerDTO(                                booking.getUser().getUserId(),                                booking.getUser().getFullName(),                                booking.getUser().getEmail(),                                booking.getUser().getPhoneNumber(),                                booking.getBookingDate(),                                booking.getParticipants(),                                booking.isActive(),                                booking.getCheckinStatus(),                                booking.getCheckinTime()                        ))                        .collect(Collectors.toList());                TourScheduleDTO tourSchedule = new TourScheduleDTO(                        assignment.getDeparture().getDepartureId(),                        tour.getTourName(),                        tour.getStartLocation(),                        assignment.getDeparture().getStartDate(),                        assignment.getDeparture().getEndDate(),                        assignment.getDeparture().getAvailableSeats(),                        assignment.getDeparture().getMaxParticipants(),                        assignment.isActive(),                        customers                );                tourSchedules.add(tourSchedule);            }        }        return tourSchedules;    }public Coordinates getCoordinates(String address) throws Exception {    String encodedAddress = URLEncoder.encode(address, StandardCharsets.UTF_8.toString());    String urlString = String.format(            "https://nominatim.openstreetmap.org/search?q=%s&format=json&limit=1",            encodedAddress);    URL url = new URL(urlString);    HttpURLConnection connection = (HttpURLConnection) url.openConnection();    connection.setRequestMethod("GET");    connection.setRequestProperty("User-Agent", "Mozilla/5.0");    connection.setRequestProperty("Accept", "application/json");    connection.setRequestProperty("Accept-Language", "en-US,en;q=0.5");    Thread.sleep(1000);    try (BufferedReader in = new BufferedReader(            new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {        StringBuilder response = new StringBuilder();        String inputLine;        while ((inputLine = in.readLine()) != null) {            response.append(inputLine);        }        JSONArray results = new JSONArray(response.toString());        if (results.length() > 0) {            double latitude = results.getJSONObject(0).getDouble("lat");            double longitude = results.getJSONObject(0).getDouble("lon");            return new Coordinates(latitude, longitude);        } else {            throw new Exception("Không tìm thấy tọa độ cho địa chỉ: " + address);        }    } catch (IOException e) {        throw new Exception("Lỗi khi truy vấn tọa độ: " + e.getMessage());    }}    public void markAttendance(AttendanceDTO attendanceDTO) {        TourGuide tourGuide = tourGuideRepository.findById(attendanceDTO.getUserId())                .orElseThrow(() -> new ResourceNotFoundException("Hướng dẫn viên không tồn tại với ID: " + attendanceDTO.getUserId()));        TourGuideAssignment assignment = tourGuideAssignmentRepository.findByTourGuideUserIdAndDepartureDepartureId(                        attendanceDTO.getUserId(), attendanceDTO.getDepartureId())                .orElseThrow(() -> new ResourceNotFoundException("Không tìm thấy phân công cho hướng dẫn viên vào chuyến đi có ID: " + attendanceDTO.getDepartureId()));        if (assignment.isActive()) {            throw new IllegalStateException("Hướng dẫn viên đã điểm danh cho chuyến đi này.");        }        LocalDate departureDate = assignment.getDeparture().getStartDate().toLocalDate();        LocalDate today = LocalDate.now();        if (!departureDate.isEqual(today)) {            throw new IllegalStateException("Ngày điểm danh không khớp với ngày bắt đầu của chuyến đi.");        }        try {            // Lấy tọa độ từ địa chỉ startLocation            Coordinates attendanceCoords = getCoordinates(attendanceDTO.getStartLocation());            Coordinates assignmentCoords = getCoordinates(assignment.getDeparture().getTour().getStartLocation());            // Tính khoảng cách giữa hai tọa độ            double distance = DistanceUtil.calculateDistance(                    attendanceCoords.getLatitude(), attendanceCoords.getLongitude(),                    assignmentCoords.getLatitude(), assignmentCoords.getLongitude());            double maxDistance = 1.0; // Khoảng cách tối đa cho phép            if (distance > maxDistance) {                throw new IllegalStateException("Vị trí không khớp với địa điểm bắt đầu của chuyến đi.");            }        } catch (Exception e) {            throw new IllegalStateException("Không thể lấy tọa độ: " + e.getMessage());        }        assignment.setActive(true);        tourGuideAssignmentRepository.save(assignment);    }}