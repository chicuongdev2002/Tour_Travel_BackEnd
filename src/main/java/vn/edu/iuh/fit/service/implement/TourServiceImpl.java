package vn.edu.iuh.fit.service.implement;import org.modelmapper.ModelMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.Cacheable;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import vn.edu.iuh.fit.dto.TourDetailDTO;import vn.edu.iuh.fit.dto.TourSummaryDTO;import vn.edu.iuh.fit.entity.Destination;import vn.edu.iuh.fit.entity.Tour;import vn.edu.iuh.fit.exception.ResourceNotFoundException;import vn.edu.iuh.fit.repositories.TourRepository;import vn.edu.iuh.fit.service.AbstractCrudService;import vn.edu.iuh.fit.service.TourService;import java.math.BigDecimal;import java.util.List;import java.util.UUID;@Service@Transactionalpublic class TourServiceImpl extends AbstractCrudService<Tour, UUID> implements TourService {    @Autowired    private TourRepository tourRepository;    private final ModelMapper modelMapper;    @Autowired    public TourServiceImpl(TourRepository tourRepository, ModelMapper modelMapper) {        this.tourRepository = tourRepository;        this.modelMapper = modelMapper;    }    @Override    protected JpaRepository<Tour, UUID> getRepository() {        return tourRepository;    }    @Override    public List<Tour> findToursByDestination(Destination destination) {        return null;    }    @Override    public List<Tour> findToursByPriceRange(BigDecimal minPrice, BigDecimal maxPrice) {        return null;    }    @Cacheable("tours")    public Page<TourSummaryDTO> getTours(int page, int size, BigDecimal minPrice, BigDecimal maxPrice) {        Pageable pageable = PageRequest.of(page, size);        Page<Tour> tours = tourRepository.findToursWithPriceRange(minPrice, maxPrice, pageable);        return tours.map(tour -> modelMapper.map(tour, TourSummaryDTO.class));    }    @Cacheable("tour")    public TourDetailDTO getTourById(UUID id) {        Tour tour = tourRepository.findById(id)                .orElseThrow(() -> new ResourceNotFoundException("Tour not found"));        return modelMapper.map(tour, TourDetailDTO.class);    }}