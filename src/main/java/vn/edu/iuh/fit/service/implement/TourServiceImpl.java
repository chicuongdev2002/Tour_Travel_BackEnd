package vn.edu.iuh.fit.service.implement;import com.amazonaws.auth.AWSStaticCredentialsProvider;import com.amazonaws.auth.BasicAWSCredentials;import com.amazonaws.services.s3.AmazonS3;import com.amazonaws.services.s3.AmazonS3ClientBuilder;import com.amazonaws.services.s3.model.CannedAccessControlList;import com.amazonaws.services.s3.model.PutObjectRequest;import jakarta.annotation.PostConstruct;import org.hibernate.Hibernate;import org.modelmapper.Converter;import org.modelmapper.ModelMapper;import org.modelmapper.spi.MappingContext;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.cache.annotation.Cacheable;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageImpl;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.hateoas.PagedModel;import org.springframework.data.web.PagedResourcesAssembler;import org.springframework.hateoas.server.RepresentationModelAssembler;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.StringUtils;import org.springframework.web.multipart.MultipartFile;import vn.edu.iuh.fit.dto.*;import vn.edu.iuh.fit.entity.*;import vn.edu.iuh.fit.enums.ParticipantType;import vn.edu.iuh.fit.enums.TourType;import vn.edu.iuh.fit.exception.ResourceNotFoundException;import vn.edu.iuh.fit.repositories.TourRepository;import vn.edu.iuh.fit.service.AbstractCrudService;import vn.edu.iuh.fit.service.TourService;import java.io.File;import java.io.IOException;import java.math.BigDecimal;import java.time.LocalDate;import java.util.*;import java.util.stream.Collectors;@Service@Transactionalpublic class TourServiceImpl extends AbstractCrudService<Tour, Long> implements TourService {    private static final Logger logger = LoggerFactory.getLogger(TourServiceImpl.class);    @Autowired    private TourRepository tourRepository;    private final ModelMapper modelMapper;//    @Autowired//    private PagedResourcesAssembler<Tour> pagedResourcesAssembler;    @Value("${aws.s3.bucket}")    private String bucketName;    @Value("${aws.access.key}")    private String accessKey;    @Value("${aws.secret.key}")    private String secretKey;    @Value("${aws.region}")    private String region;    private AmazonS3 s3Client;    @Autowired    public TourServiceImpl(TourRepository tourRepository, ModelMapper modelMapper) {        this.tourRepository = tourRepository;        this.modelMapper = modelMapper;    }    @PostConstruct    public void initializeAmazonS3Client() {        if (StringUtils.isEmpty(accessKey) || StringUtils.isEmpty(secretKey)) {            throw new IllegalStateException("AWS credentials not properly configured");        }        BasicAWSCredentials awsCredentials = new BasicAWSCredentials(accessKey, secretKey);        this.s3Client = AmazonS3ClientBuilder.standard()                .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))                .withRegion(region)                .build();    }    @Override    protected JpaRepository<Tour, Long> getRepository() {        return tourRepository;    }    @Override    public List<Tour> findToursByDestination(Destination destination) {        return null;    }@Overridepublic Page<TourSummaryDTO> getTours(String keyword, int page, int size, BigDecimal minPrice, BigDecimal maxPrice,                                     String tourTypeStr, String startLocation, String participantTypeStr) {    Pageable pageable = PageRequest.of(page, size);    Page<Object[]> results;    TourType tourType = null;    ParticipantType participantType = null;    if (tourTypeStr != null && !tourTypeStr.isEmpty()) {        try {            tourType = TourType.valueOf(tourTypeStr.toUpperCase());        } catch (IllegalArgumentException e) {            throw new IllegalArgumentException("Invalid tour type: " + tourTypeStr);        }    }    if (participantTypeStr != null && !participantTypeStr.isEmpty()) {        try {            participantType = ParticipantType.valueOf(participantTypeStr.toUpperCase());        } catch (IllegalArgumentException e) {            throw new IllegalArgumentException("Invalid participant type: " + participantTypeStr);        }    }    if (keyword != null && !keyword.isEmpty()) {        // Tìm kiếm với từ khóa        results = tourRepository.findtTourByKeyword(keyword, pageable);    } else if (tourType != null || startLocation != null || participantType != null) {        // Tìm kiếm theo bộ lộc        results = tourRepository.searchTours(minPrice, maxPrice, tourType, startLocation, participantType, pageable);    } else {        // Lấy danh sách mặc định        results = tourRepository.findToursWithPriceRange(minPrice, maxPrice, pageable);    }    return results.map(result -> {        TourSummaryDTO dto = new TourSummaryDTO();        Tour tour = (Tour) result[0];        TourPricing tourPricing = (TourPricing) result[1];        LocalDate startDate = (LocalDate) result[2];        Integer availableSeats = (Integer) result[3];        String imageUrl = (String) result[4];        dto.setTourId(tour.getTourId());        dto.setTourName(tour.getTourName());        dto.setTourDescription(tour.getTourDescription());        dto.setDuration(tour.getDuration());        dto.setStartLocation(tour.getStartLocation());        dto.setPrice(tourPricing.getPrice());        dto.setStartDate(startDate);        dto.setAvailableSeats(availableSeats);        dto.setImageUrl(imageUrl);        return dto;    });}    @PostConstruct    public void initializeModelMapper() {        modelMapper.addConverter(new Converter<UUID, Long>() {            public Long convert(MappingContext<UUID, Long> context) {                return context.getSource() != null ? Long.valueOf(context.getSource().toString()) : null;            }        });    }    @Cacheable("tour")    public TourDetailDTO getTourById(long id) {        logger.info("Fetching tour with ID: {}", id);        Tour tour = tourRepository.findById(id)                .orElseThrow(() -> new ResourceNotFoundException("Tour not found"));        // Khởi tạo Hibernate        Hibernate.initialize(tour.getDepartures());        logger.info("Number of Departures: {}", tour.getDepartures().size());        Hibernate.initialize(tour.getTourDestinations());        Hibernate.initialize(tour.getTourGuide());        // Sắp xếp và ánh xạ destination        List<DestinationDTO> destinationDTOs = tour.getTourDestinations().stream()                .sorted(Comparator.comparingInt(TourDestination::getSequenceOrder))                .map(tourDestination -> {                    Destination destination = tourDestination.getDestination();                    return new DestinationDTO(                            destination.getDestinationId(),                            destination.getName(),                            destination.getDescription(),                            destination.getProvince(),                            tourDestination.getSequenceOrder(),                            tourDestination.getDuration()                    );                })                .collect(Collectors.toList());        // Khởi tạo tourPricing cho từng departure        for (Departure departure : tour.getDepartures()) {            Hibernate.initialize(departure.getTourPricing());            logger.info("Departure ID: {}", departure.getDepartureId());            // Logging tourPricing            if (departure.getTourPricing() != null && !departure.getTourPricing().isEmpty()) {                for (TourPricing pricing : departure.getTourPricing()) {                    logger.info("Tour Pricing: price={}, participantType={}",                            pricing.getPrice(), pricing.getParticipantType());                }            } else {                logger.warn("No tour pricing found for Departure ID: {}", departure.getDepartureId());            }        }        // Ánh xạ departures        List<DepartureDTO> departureDTOs = tour.getDepartures().stream()                .map(departure -> {                    DepartureDTO departureDTO = new DepartureDTO();                    departureDTO.setDepartureId(departure.getDepartureId());                    departureDTO.setStartDate(departure.getStartDate());                    departureDTO.setEndDate(departure.getEndDate());                    departureDTO.setAvailableSeats(departure.getAvailableSeats());                    departureDTO.setMaxParticipants(departure.getMaxParticipants());                    // Ánh xạ tourPricing                    List<TourPricingDTO> tourPricingDTOs = departure.getTourPricing().stream()                            .map(pricing -> {                                TourPricingDTO pricingDTO = new TourPricingDTO();                                pricingDTO.setPrice(pricing.getPrice());                                pricingDTO.setParticipantType(pricing.getParticipantType());                                pricingDTO.setModifiedDate(pricing.getModifiedDate());                                return pricingDTO;                            })                            .collect(Collectors.toList());                    departureDTO.setTourPricing(tourPricingDTOs);                    logger.info("Mapped DepartureDTO: {}", departureDTO);                    return departureDTO;                })                .collect(Collectors.toList());        TourDetailDTO tourDetailDTO = modelMapper.map(tour, TourDetailDTO.class);        tourDetailDTO.setDepartures(departureDTOs); // Gán danh sách departure vào DTO        tourDetailDTO.setDestinations(destinationDTOs); // Gán danh sách destination vào DTO        logger.info("Final TourDetailDTO: {}", tourDetailDTO);        return tourDetailDTO;    }    public Tour convertDtoToEntity(TourDetailDTO tourDetailDTO) {        return modelMapper.map(tourDetailDTO, Tour.class);    }    @Override    public String uploadImageToAWS(File file, Tour tour) throws IOException {        String fileName = UUID.randomUUID() + "_" + file.getName();        try {            s3Client.putObject(new PutObjectRequest(bucketName, fileName, file));//                    .withCannedAcl(CannedAccessControlList.PublicRead);            String fileUrl = s3Client.getUrl(bucketName, fileName).toString();            Image image = new Image();            if (tour.getImages() == null) {                tour.setImages(new HashSet<>());            }            image.setImageUrl(fileUrl);            image.setTour(tour);            tour.getImages().add(image);            tourRepository.save(tour);            return fileUrl;        } catch (Exception e) {            throw new IOException("Error uploading image: " + e.getMessage(), e);        } finally {            // Dọn dẹp file tạm thời nếu cần            if (file.exists()) {                file.delete();            }        }    }    // Phương thức chuyển đổi MultipartFile thành File    @Override    public File convertMultiPartToFile(MultipartFile file) throws IOException {        File convFile = new File(System.getProperty("java.io.tmpdir") + "/" + file.getOriginalFilename());        file.transferTo(convFile);        System.out.println("File được tạo: " + convFile.getAbsolutePath());        return convFile;    }//    @Override//    public List<Tour> searchTours(String keyword) {//        return tourRepository.findByTourNameContainingIgnoreCaseOrStartLocationContainingIgnoreCase(keyword, keyword);//    }}