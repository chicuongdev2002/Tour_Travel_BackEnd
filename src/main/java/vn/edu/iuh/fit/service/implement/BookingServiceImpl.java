package vn.edu.iuh.fit.service.implement;import lombok.AllArgsConstructor;import org.modelmapper.ModelMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.stereotype.Service;import vn.edu.iuh.fit.dto.BookingDTO;import vn.edu.iuh.fit.dto.respone.ItineraryResponse;import vn.edu.iuh.fit.entity.Booking;import vn.edu.iuh.fit.entity.Departure;import vn.edu.iuh.fit.repositories.BookingRepository;import vn.edu.iuh.fit.service.BookingService;import vn.edu.iuh.fit.service.DepartureService;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.stream.Collectors;@Service@AllArgsConstructorpublic class BookingServiceImpl extends AbstractCrudService<Booking, String> implements BookingService {    @Autowired    private BookingRepository bookingRepository;    private final ModelMapper modelMapper;    @Override    protected JpaRepository<Booking, String> getRepository() {        return bookingRepository;    }    @Override    public BookingDTO convertDTO(Booking booking) {        return modelMapper.map(booking, BookingDTO.class);    }    public ItineraryResponse getItineraryByUserId(long userId) {        List<Booking> bookings = bookingRepository.findByUser_UserId(userId);        return convertToItineraryResponse(bookings);    }    private ItineraryResponse convertToItineraryResponse(List<Booking> bookings) {        ItineraryResponse response = new ItineraryResponse();        response.setUserId(bookings.isEmpty() ? 0 : bookings.get(0).getUser().getUserId());        Map<Long, ItineraryResponse.TourItinerary> itineraryMap = new HashMap<>();        for (Booking booking : bookings) {            Departure departure = booking.getDeparture();            Long tourId = departure.getTour().getTourId();            // Tạo hoặc lấy TourItinerary            ItineraryResponse.TourItinerary tourItinerary = itineraryMap.computeIfAbsent(tourId, id -> {                ItineraryResponse.TourItinerary newTourItinerary = new ItineraryResponse.TourItinerary();                newTourItinerary.setTourId(id);                newTourItinerary.setTourName(departure.getTour().getTourName());                newTourItinerary.setDepartures(new ArrayList<>());                newTourItinerary.setDestinations(new ArrayList<>()); // Khởi tạo danh sách destinations                return newTourItinerary;            });            // Tạo DepartureInfo            ItineraryResponse.DepartureInfo departureInfo = new ItineraryResponse.DepartureInfo();            departureInfo.setDepartureId(departure.getDepartureId());            departureInfo.setStartDate(departure.getStartDate().toString());            departureInfo.setEndDate(departure.getEndDate().toString());            // Thêm DepartureInfo vào danh sách departures            tourItinerary.getDepartures().add(departureInfo);            // Lấy thông tin destinations từ tourDestinations            List<ItineraryResponse.DestinationInfo> destinations = departure.getTour().getTourDestinations().stream()                    .map(td -> {                        ItineraryResponse.DestinationInfo destinationInfo = new ItineraryResponse.DestinationInfo();                        destinationInfo.setDestinationId(td.getDestination().getDestinationId());                        destinationInfo.setName(td.getDestination().getName());                        destinationInfo.setDuration(td.getDuration());                        destinationInfo.setSequenceOrder(td.getSequenceOrder());                        return destinationInfo;                    }).collect(Collectors.toList());            // Thêm destinations vào TourItinerary (tránh trùng lặp)            for (ItineraryResponse.DestinationInfo destination : destinations) {                if (!tourItinerary.getDestinations().contains(destination)) {                    tourItinerary.getDestinations().add(destination);                }            }        }        response.setItinerary(itineraryMap.values().stream().collect(Collectors.toList()));        return response;    }}