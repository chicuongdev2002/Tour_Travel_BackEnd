package vn.edu.iuh.fit.service.implement;import lombok.AllArgsConstructor;import org.modelmapper.ModelMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.stereotype.Service;import vn.edu.iuh.fit.dto.*;import vn.edu.iuh.fit.dto.respone.ItineraryResponse;import vn.edu.iuh.fit.entity.*;import vn.edu.iuh.fit.repositories.BookingRepository;import vn.edu.iuh.fit.repositories.PaymentRepository;import vn.edu.iuh.fit.repositories.TourGuideAssignmentRepository;import vn.edu.iuh.fit.service.BookingService;import vn.edu.iuh.fit.service.DepartureService;import java.time.LocalDate;import java.time.LocalDateTime;import java.util.*;import java.util.stream.Collectors;@Service@AllArgsConstructorpublic class BookingServiceImpl extends AbstractCrudService<Booking, String> implements BookingService {    @Autowired    private BookingRepository bookingRepository;    @Autowired    private TourGuideAssignmentRepository tourGuideAssignmentRepository;    @Autowired    private PaymentRepository paymentRepository;    private final ModelMapper modelMapper;    @Override    protected JpaRepository<Booking, String> getRepository() {        return bookingRepository;    }    @Override    public BookingDTO convertDTO(Booking booking) {        return modelMapper.map(booking, BookingDTO.class);    }    public ItineraryResponse getItineraryByUserId(long userId) {        List<Booking> bookings = bookingRepository.findByUser_UserId(userId);        return convertToItineraryResponse(bookings);    }    @Override    public List<Booking> findByDepartures(List<Departure> departures) {        return bookingRepository.findByDepartureIn(departures);    }    private ItineraryResponse convertToItineraryResponse(List<Booking> bookings) {        ItineraryResponse response = new ItineraryResponse();        response.setUserId(bookings.isEmpty() ? 0 : bookings.get(0).getUser().getUserId());        Map<Long, ItineraryResponse.TourItinerary> itineraryMap = new HashMap<>();        for (Booking booking : bookings) {            Departure departure = booking.getDeparture();            Long tourId = departure.getTour().getTourId();            // Tạo hoặc lấy TourItinerary            ItineraryResponse.TourItinerary tourItinerary = itineraryMap.computeIfAbsent(tourId, id -> {                ItineraryResponse.TourItinerary newTourItinerary = new ItineraryResponse.TourItinerary();                newTourItinerary.setTourId(id);                newTourItinerary.setTourName(departure.getTour().getTourName());                newTourItinerary.setDepartures(new ArrayList<>());                newTourItinerary.setDestinations(new ArrayList<>());                return newTourItinerary;            });            // Tạo DepartureInfo            ItineraryResponse.DepartureInfo departureInfo = new ItineraryResponse.DepartureInfo();            departureInfo.setDepartureId(departure.getDepartureId());            departureInfo.setStartDate(departure.getStartDate().toString());            departureInfo.setEndDate(departure.getEndDate().toString());            // Thêm DepartureInfo vào danh sách departures            tourItinerary.getDepartures().add(departureInfo);            // Lấy thông tin destinations từ tourDestinations            List<ItineraryResponse.DestinationInfo> destinations = departure.getTour().getTourDestinations().stream()                    .map(td -> {                        ItineraryResponse.DestinationInfo destinationInfo = new ItineraryResponse.DestinationInfo();                        destinationInfo.setDestinationId(td.getDestination().getDestinationId());                        destinationInfo.setName(td.getDestination().getName());                        destinationInfo.setDuration(td.getDuration());                        destinationInfo.setSequenceOrder(td.getSequenceOrder());                        return destinationInfo;                    }).collect(Collectors.toList());            // Thêm destinations vào TourItinerary (tránh trùng lặp)            for (ItineraryResponse.DestinationInfo destination : destinations) {                if (!tourItinerary.getDestinations().contains(destination)) {                    tourItinerary.getDestinations().add(destination);                }            }        }        // Sắp xếp các TourItinerary theo ngày bắt đầu gần nhất        List<ItineraryResponse.TourItinerary> sortedItineraries = itineraryMap.values().stream()                .sorted(Comparator.comparing(ti ->                        ti.getDepartures().isEmpty() ? LocalDateTime.MAX :                                LocalDateTime.parse(ti.getDepartures().get(0).getStartDate())                ))                .collect(Collectors.toList());        response.setItinerary(sortedItineraries);        return response;    }    @Override    public List<BookingDetailDTO> getBookingsByUserId(long userId) {        List<Booking> bookings = bookingRepository.findByUser_UserId(userId);        return bookings.stream()                .map(this::convertToTourDetailDTO)                .collect(Collectors.toList());    }    private BookingDetailDTO convertToTourDetailDTO(Booking booking) {        BookingDetailDTO detailDTO = new BookingDetailDTO();        detailDTO.setBookingId(booking.getBookingId());        detailDTO.setBookingDate(booking.getBookingDate());        detailDTO.setParticipants(booking.getParticipants());        detailDTO.setActive(booking.isActive());        detailDTO.setAddress(booking.getAddress());        detailDTO.setCheckinStatus(booking.getCheckinStatus());        detailDTO.setCheckinTime(booking.getCheckinTime());        // Chuyển đổi thông tin tour        Departure departure = booking.getDeparture();        if (departure != null) {            Tour tour = departure.getTour(); // Giả sử bạn có phương thức getTour trong Departure            detailDTO.setTour(modelMapper.map(tour, TourInfoDTO.class));            detailDTO.setDeparture(modelMapper.map(departure, DepartureDTO.class));        }        // Lấy danh sách thanh toán từ bảng Payment        List<Payment> payments = paymentRepository.findByBooking_BookingId(booking.getBookingId());        detailDTO.setPayments(payments.stream()                .map(payment -> modelMapper.map(payment, PaymentInfoDTO.class))                .collect(Collectors.toList()));        // Lấy thông tin hướng dẫn viên (nếu cần)        List<TourGuideAssignment> assignments = tourGuideAssignmentRepository.findByDeparture_DepartureId(departure.getDepartureId());        if (!assignments.isEmpty()) {            TourGuide tourGuide = assignments.get(0).getTourGuide();            detailDTO.setTourGuide(modelMapper.map(tourGuide, TourGuideDTO.class));        }        // Lấy thông tin đại lý cung cấp tour (nếu có)        if (departure.getTour().getUser()!=null) {            detailDTO.setTourProvider(modelMapper.map(departure.getTour().getUser(), UserInfoDTO.class));        }        return detailDTO;    }}