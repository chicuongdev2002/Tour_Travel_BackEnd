package vn.edu.iuh.fit.service.implement;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import vn.edu.iuh.fit.entity.Account;import vn.edu.iuh.fit.entity.Booking;import vn.edu.iuh.fit.entity.User;import vn.edu.iuh.fit.exception.AccountAlreadyExistsException;import vn.edu.iuh.fit.repositories.AccountRepository;import vn.edu.iuh.fit.repositories.UserRepository;import vn.edu.iuh.fit.service.AbstractCrudService;import vn.edu.iuh.fit.service.AccountService;import vn.edu.iuh.fit.service.BookingService;import java.util.Optional;import java.util.UUID;@Servicepublic class AccountServiceImpl extends AbstractCrudService<Account, UUID> implements AccountService {    @Autowired    private AccountRepository accountRepository;    @Autowired    private UserRepository userRepository;    @Autowired    private PasswordEncoder passwordEncoder; // Để mã hóa mật khẩu    @Override    protected JpaRepository<Account, UUID> getRepository() {        return accountRepository;    }    @Override    public UUID register(String username, String password, User user) {        // Kiểm tra xem tài khoản đã tồn tại hay chưa        Optional<Account> existingAccount = accountRepository.findByUsername(username);        if (existingAccount.isPresent()) {            throw new AccountAlreadyExistsException("Tài khoản đã tồn tại");        }        // Tạo tài khoản mới        Account newAccount = new Account();        UUID accountId = UUID.randomUUID(); // Tạo UUID cho tài khoản        newAccount.setAccountId(accountId);        newAccount.setUsername(username);        newAccount.setPassword(passwordEncoder.encode(password)); // Mã hóa mật khẩu        accountRepository.save(newAccount); // Lưu tài khoản vào cơ sở dữ liệu        // Tạo người dùng mới và gán cùng một UUID        User newUser = new User();        newUser.setUserId(accountId); // Gán accountId cho User        newUser.setEmail(user.getEmail());        newUser.setFullName(user.getFullName());        newUser.setPhoneNumber(user.getPhoneNumber());        userRepository.save(newUser); // Lưu người dùng vào cơ sở dữ liệu        return accountId; // Trả về accountId    }    @Override    public Account login(String username, String password) {        Optional<Account> account = accountRepository.findByUsername(username);        if (account.isPresent() && passwordEncoder.matches(password, account.get().getPassword())) {            return account.get();        }        throw new RuntimeException("Tên tài khoản hoặc mật khẩu không chính xác");    }    @Override    public void deleteAccount(UUID accountId) {        accountRepository.deleteById(accountId);    }    @Override    public void changePassword(UUID accountId, String newPassword) {        Optional<Account> account = accountRepository.findById(accountId);        if (account.isPresent()) {            account.get().setPassword(passwordEncoder.encode(newPassword));            accountRepository.save(account.get());        } else {            throw new RuntimeException("Tài khoan không tồn tại");        }    }    @Override    public void resetPassword(String username, String newPassword) {        Optional<Account> account = accountRepository.findByUsername(username);        if (account.isPresent()) {            account.get().setPassword(passwordEncoder.encode(newPassword));            accountRepository.save(account.get());        } else {            throw new RuntimeException("Tài khoản không tồn tại");        }    }}