package vn.edu.iuh.fit.service.implement;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import vn.edu.iuh.fit.dto.*;import vn.edu.iuh.fit.entity.*;import vn.edu.iuh.fit.enums.AccountRole;import vn.edu.iuh.fit.exception.*;import vn.edu.iuh.fit.repositories.AccountRepository;import vn.edu.iuh.fit.repositories.PaymentRepository;import vn.edu.iuh.fit.repositories.UserRepository;import vn.edu.iuh.fit.service.AccountService;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;@Servicepublic class AccountServiceImpl extends AbstractCrudService<Account, Long> implements AccountService {    @Autowired    private AccountRepository accountRepository;    @Autowired    private UserRepository userRepository;    @Autowired    private PaymentRepository paymentRepository;    @Autowired    private PasswordEncoder passwordEncoder; // Để mã hóa mật khẩu    @Override    protected JpaRepository<Account, Long> getRepository() {        return accountRepository;    }//    @Override//    public User register(String username, String password, User user) {//        // Kiểm tra xem tài khoản đã tồn tại hay chưa//        Optional<Account> existingAccount = accountRepository.findByUsername(username);//        if (existingAccount.isPresent()) {//            throw new AccountAlreadyExistsException("Tài khoản đã tồn tại");//        }//        // Kiểm tra xem email đã tồn tại hay chưa//        Optional<User> existingUser = userRepository.findByEmail(user.getEmail());//        if (existingUser.isPresent()) {//            throw new EmailAlreadyExistsException("Email đã được sử dụng");//        }////        // Tạo người dùng mới//        User newUser = new User();//        newUser.setEmail(user.getEmail());//        newUser.setFullName(user.getFullName());//        newUser.setPhoneNumber(user.getPhoneNumber());////        // Lưu người dùng vào cơ sở dữ liệu//        userRepository.save(newUser);////        // Tạo tài khoản mới//        Account newAccount = new Account();//        newAccount.setUsername(username);//        newAccount.setPassword(passwordEncoder.encode(password)); // Mã hóa mật khẩu//        newAccount.setRole(AccountRole.CUSTOMER);//        newAccount.setActive(true);//        newAccount.setUser(newUser); // Gán User cho Account////        // Lưu tài khoản vào cơ sở dữ liệu//        accountRepository.save(newAccount);////        return newUser; // Trả về người dùng//    }public User register(UserRegistrationDTO registrationDTO) {    // Check if the account already exists    System.out.println("registrationDTO: " + registrationDTO);    Optional<Account> existingAccount = accountRepository.findByUsername(registrationDTO.getUsername());    System.out.println("existingAccount: " + existingAccount);    if (existingAccount.isPresent()) {        throw new AccountAlreadyExistsException("Tài khoản đã tồn tại");    }    // Check if the email already exists    Optional<User> existingUser = userRepository.findByEmail(registrationDTO.getEmail());    System.out.println("existingUser: " + existingUser);    if (existingUser.isPresent()) {        throw new EmailAlreadyExistsException("Email đã được sử dụng");    }    // Create a new user    User newUser = new User();    newUser.setEmail(registrationDTO.getEmail());    newUser.setFullName(registrationDTO.getFullName());    newUser.setPhoneNumber(registrationDTO.getPhoneNumber());    // Save the user to the database    userRepository.save(newUser);    // Create a new account    Account newAccount = new Account();    newAccount.setUsername(registrationDTO.getUsername());    newAccount.setPassword(passwordEncoder.encode(registrationDTO.getPassword())); // Encode password    newAccount.setRole(AccountRole.CUSTOMER);    newAccount.setActive(true);    newAccount.setUser(newUser); // Associate User with Account    // Save the account to the database    accountRepository.save(newAccount);    return newUser; // Return the new user}    @Override    public UserDTO login(String username, String password) {        // Find account by username        Optional<Account> accountOpt = accountRepository.findByUsername(username);        // Check if account exists        if (accountOpt.isEmpty()) {            throw new AccountNotFoundException("Tài khoản không tồn tại.");        }        Account account = accountOpt.get();        // Check password        if (!passwordEncoder.matches(password, account.getPassword())) {            throw new InvalidPasswordException("Mật khẩu không đúng.");        }        User user = account.getUser();        UserDTO userDTO = new UserDTO();        userDTO.setUserId(user.getUserId());        userDTO.setEmail(user.getEmail());        userDTO.setFullName(user.getFullName());        userDTO.setPhoneNumber(user.getPhoneNumber());        // Map addresses        if (user.getAddresses() != null) {            List<AddressDTO> addressDTOs = user.getAddresses().stream()                    .map(address -> {                        AddressDTO addressDTO = new AddressDTO();                        addressDTO.setAddressId(address.getAddressId());                        addressDTO.setAddress(address.getAddress());                        return addressDTO;                    })                    .collect(Collectors.toList());            userDTO.setAddresses(addressDTOs);        }        // Map reviews        if (user.getReviews() != null) {            List<ReviewDTO> reviewDTOs = user.getReviews().stream()                    .map(review -> {                        ReviewDTO reviewDTO = new ReviewDTO();                        reviewDTO.setReviewId(review.getReviewId());                        reviewDTO.setRating(review.getRating());                        reviewDTO.setComment(review.getComment());                        reviewDTO.setReviewDate(review.getReviewDate());                        return reviewDTO;                    })                    .collect(Collectors.toList());            userDTO.setReviews(reviewDTOs);        }        // Map bookings with tour, departure, pricing, and payment information        if (user.getBookings() != null) {            List<BookingDTO> bookingDTOs = user.getBookings().stream()                    .map(booking -> {                        BookingDTO bookingDTO = new BookingDTO();                        bookingDTO.setBookingId(booking.getBookingId());                        bookingDTO.setBookingDate(booking.getBookingDate());                        bookingDTO.setParticipants(booking.getParticipants());                        bookingDTO.setActive(booking.isActive());                        // Map departure information                        Departure departure = booking.getDeparture();                        if (departure != null) {                            DepartureDTO departureDTO = new DepartureDTO();                            departureDTO.setDepartureId(departure.getDepartureId());                            departureDTO.setStartDate(departure.getStartDate());                            departureDTO.setEndDate(departure.getEndDate());                            // Map tour pricing information                            if (departure.getTourPricing() != null) {                                List<TourPricingDTO> pricingDTOs = departure.getTourPricing().stream()                                        .map(pricing -> new TourPricingDTO(                                                pricing.getPrice(),                                                pricing.getParticipantType(),                                                pricing.getModifiedDate()))                                        .collect(Collectors.toList());                                departureDTO.setTourPricing(pricingDTOs);                            }                            bookingDTO.setDeparture(departureDTO);                            // Map tour information                            Tour tour = departure.getTour();                            if (tour != null) {                                TourInfoDTO tourDTO = new TourInfoDTO(                                        tour.getTourId(),                                        tour.getTourName(),                                        tour.getTourDescription(),                                        tour.getDuration(),                                        tour.getStartLocation(),                                        tour.getTourType()                                );                                bookingDTO.setTour(tourDTO);                            }                        }                        List<Payment> payments = paymentRepository.findByBooking_BookingId(booking.getBookingId());                        if (payments != null) {                            List<PaymentInfoDTO> paymentDTOs = payments.stream()                                    .map(payment -> new PaymentInfoDTO(                                            payment.getPaymentId(),                                            payment.getAmount(),                                            payment.getPaymentDate(),                                            payment.getPaymentMethod()))                                    .collect(Collectors.toList());                            bookingDTO.setPayments(paymentDTOs);                        }                        return bookingDTO;                    })                    .collect(Collectors.toList());            userDTO.setBookings(bookingDTOs);        }        return userDTO;    }    @Override    public void changePassword(long accountId, String newPassword) {        Optional<Account> account = accountRepository.findById(accountId);        if (account.isPresent()) {            account.get().setPassword(passwordEncoder.encode(newPassword));            accountRepository.save(account.get());        } else {            throw new RuntimeException("Tài khoan không tồn tại");        }    }    @Override    public void resetPassword(String email, String newPassword) {        System.out.println(email);        System.out.println(newPassword);        // Tìm người dùng dựa trên email        Optional<User> userOptional = userRepository.findByEmail(email);        System.out.println("userOptional" + userOptional);        if (userOptional.isPresent()) {            User user = userOptional.get();            // Tìm tài khoản liên quan đến người dùng            Optional<Account> accountOptional = accountRepository.findByUser_UserId(user.getUserId());            System.out.println("accountOptional" + accountOptional);            if (accountOptional.isPresent()) {                Account account = accountOptional.get();                account.setPassword(passwordEncoder.encode(newPassword)); // Mã hóa mật khẩu mới                accountRepository.save(account); // Lưu tài khoản với mật khẩu mới                System.out.println("account" + account);            } else {                throw new RuntimeException("Tài khoản không tồn tại cho người dùng này");            }        } else {            throw new RuntimeException("Tài khoản không tồn tại với email này");        }    }    @Override    public boolean existsByUsername(String username) {        System.out.println("username " + username);        return accountRepository.findByUsername(username).isPresent();    }    @Override    public String getEmailByUsername(String username) {        Optional<Account> account = accountRepository.findByUsername(username);        if (account != null && account.get().getUser() != null) {            return account.get().getUser().getEmail();        }        return null;    }}