package vn.edu.iuh.fit.service.implement;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import vn.edu.iuh.fit.entity.Account;import vn.edu.iuh.fit.entity.Booking;import vn.edu.iuh.fit.entity.User;import vn.edu.iuh.fit.enums.AccountRole;import vn.edu.iuh.fit.exception.*;import vn.edu.iuh.fit.repositories.AccountRepository;import vn.edu.iuh.fit.repositories.UserRepository;import vn.edu.iuh.fit.service.AbstractCrudService;import vn.edu.iuh.fit.service.AccountService;import vn.edu.iuh.fit.service.BookingService;import java.util.Optional;import java.util.UUID;@Servicepublic class AccountServiceImpl extends AbstractCrudService<Account, Long> implements AccountService {    @Autowired    private AccountRepository accountRepository;    @Autowired    private UserRepository userRepository;    @Autowired    private PasswordEncoder passwordEncoder; // Để mã hóa mật khẩu    @Override    protected JpaRepository<Account, Long> getRepository() {        return accountRepository;    }    @Override    public User register(String username, String password, User user) {        // Kiểm tra xem tài khoản đã tồn tại hay chưa        Optional<Account> existingAccount = accountRepository.findByUsername(username);        if (existingAccount.isPresent()) {            throw new AccountAlreadyExistsException("Tài khoản đã tồn tại");        }        // Kiểm tra xem email đã tồn tại hay chưa        Optional<User> existingUser = userRepository.findByEmail(user.getEmail());        if (existingUser.isPresent()) {            throw new EmailAlreadyExistsException("Email đã được sử dụng");        }        // Tạo người dùng mới        User newUser = new User();        newUser.setEmail(user.getEmail());        newUser.setFullName(user.getFullName());        newUser.setPhoneNumber(user.getPhoneNumber());        // Lưu người dùng vào cơ sở dữ liệu        userRepository.save(newUser);        // Tạo tài khoản mới        Account newAccount = new Account();        newAccount.setUsername(username);        newAccount.setPassword(passwordEncoder.encode(password)); // Mã hóa mật khẩu        newAccount.setRole(AccountRole.CUSTOMER);        newAccount.setActive(true);        newAccount.setUser(newUser); // Gán User cho Account        // Lưu tài khoản vào cơ sở dữ liệu        accountRepository.save(newAccount);        return newUser; // Trả về người dùng    }    @Override    public Long login(String username, String password) {        // Tìm kiếm tài khoản theo username        Optional<Account> accountOpt = accountRepository.findByUsername(username);        // Kiểm tra nếu tài khoản tồn tại        if (accountOpt.isEmpty()) {            throw new AccountNotFoundException("Tài khoản không tồn tại.");        }        Account account = accountOpt.get();        // Kiểm tra mật khẩu        if (!passwordEncoder.matches(password, account.getPassword())) {            throw new InvalidPasswordException("Mật khẩu không đúng.");        }        // Trả về userId nếu đăng nhập thành công        return account.getUser().getUserId();    }    @Override public void deleteAccount(long accountId) {        accountRepository.deleteById(accountId);    }    @Override    public void changePassword(long accountId, String newPassword) {        Optional<Account> account = accountRepository.findById(accountId);        if (account.isPresent()) {            account.get().setPassword(passwordEncoder.encode(newPassword));            accountRepository.save(account.get());        } else {            throw new RuntimeException("Tài khoan không tồn tại");        }    }    @Override    public void resetPassword(String email, String newPassword) {        System.out.println(email);        System.out.println(newPassword);        // Tìm người dùng dựa trên email        Optional<User> userOptional = userRepository.findByEmail(email);        System.out.println("userOptional"+userOptional);        if (userOptional.isPresent()) {            User user = userOptional.get();            // Tìm tài khoản liên quan đến người dùng            Optional<Account> accountOptional = accountRepository.findByUser_UserId(user.getUserId());            System.out.println("accountOptional"+ accountOptional);            if (accountOptional.isPresent()) {                Account account = accountOptional.get();                account.setPassword(passwordEncoder.encode(newPassword)); // Mã hóa mật khẩu mới                accountRepository.save(account); // Lưu tài khoản với mật khẩu mới                System.out.println("account"+account);            } else {                throw new RuntimeException("Tài khoản không tồn tại cho người dùng này");            }        } else {            throw new RuntimeException("Tài khoản không tồn tại với email này");        }    }    @Override    public boolean existsByUsername(String username) {        System.out.println("username "+username);        return accountRepository.findByUsername(username).isPresent();    }}