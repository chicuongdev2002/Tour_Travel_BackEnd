package vn.edu.iuh.fit.repositories;import org.springframework.cache.annotation.Cacheable;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.repository.EntityGraph;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.Query;import org.springframework.data.repository.query.Param;import org.springframework.stereotype.Repository;import vn.edu.iuh.fit.entity.Tour;import vn.edu.iuh.fit.enums.ParticipantType;import vn.edu.iuh.fit.enums.TourType;import java.math.BigDecimal;import java.util.List;import java.util.Optional;import java.util.UUID;@Repositorypublic interface TourRepository extends JpaRepository<Tour, Long> {    //Lấy danh sách tour theo giá tiền trung bình theo page//    @Query("SELECT t FROM Tour t LEFT JOIN FETCH t.departures WHERE t.price BETWEEN :minPrice AND :maxPrice")//    Page<Tour> findToursWithPriceRange(BigDecimal minPrice, BigDecimal maxPrice, Pageable pageable);//    @Query("SELECT t FROM Tour t JOIN Departure d ON d.tour.tourId = t.tourId JOIN TourPricing tp ON d.departureId = tp.departure.departureId WHERE tp.price BETWEEN :minPrice AND :maxPrice")//    Page<Tour> findToursWithPriceRange(BigDecimal minPrice, BigDecimal maxPrice, Pageable pageable);    @Cacheable(value = "toursCache", key = "#minPrice + '-' + #maxPrice")    @Query("SELECT t, tp, d.startDate,d.availableSeats, i.imageUrl FROM Tour t " +            "JOIN Departure d ON d.tour.tourId = t.tourId " +            "JOIN TourPricing tp ON d.departureId = tp.departure.departureId " +            "LEFT JOIN Image i ON i.tour.tourId = t.tourId " +            "WHERE tp.price BETWEEN :minPrice AND :maxPrice")    Page<Object[]> findToursWithPriceRange(@Param("minPrice") BigDecimal minPrice,                                           @Param("maxPrice") BigDecimal maxPrice,                                           Pageable pageable);    @EntityGraph(attributePaths = {"departures", "tourDestinations", "reviews"})    Optional<Tour> findById(long id);    //Tìm kiếm tour theo tên tour hoặc địa điểm bắt đầu    List<Tour> findByTourNameContainingIgnoreCaseOrStartLocationContainingIgnoreCase(String tourName, String startLocation);    @Query("SELECT t, tp, d.startDate, d.availableSeats, i.imageUrl FROM Tour t " +            "JOIN Departure d ON d.tour.tourId = t.tourId " +            "JOIN TourPricing tp ON d.departureId = tp.departure.departureId " +            "LEFT JOIN Image i ON i.tour.tourId = t.tourId " +            "WHERE(LOWER(t.tourName) LIKE LOWER(CONCAT('%', :keyword, '%')) " +            "OR LOWER(t.startLocation) LIKE LOWER(CONCAT('%', :keyword, '%')))")    Page<Object[]> findtTourByKeyword(@Param("keyword") String keyword,Pageable pageable);    // Phương thức tìm kiếm tour theo nhiều tiêu chí    @Query("SELECT t, tp, d.startDate, d.availableSeats, i.imageUrl FROM Tour t " +            "JOIN Departure d ON d.tour.tourId = t.tourId " +            "JOIN TourPricing tp ON d.departureId = tp.departure.departureId " +            "LEFT JOIN Image i ON i.tour.tourId = t.tourId " +            "WHERE (:minPrice IS NULL OR tp.price >= :minPrice) " +            "AND (:maxPrice IS NULL OR tp.price <= :maxPrice) " +            "AND (:tourType IS NULL OR t.tourType = :tourType) " +            "AND (:startLocation IS NULL OR LOWER(t.startLocation) LIKE LOWER(CONCAT('%', :startLocation, '%'))) " +            "AND (:participantType IS NULL OR tp.participantType = :participantType)")    Page<Object[]> searchTours(@Param("minPrice") BigDecimal minPrice,                               @Param("maxPrice") BigDecimal maxPrice,                               @Param("tourType") TourType tourType,                               @Param("startLocation") String startLocation,                               @Param("participantType") ParticipantType participantType,                               Pageable pageable);}