package vn.edu.iuh.fit.mailservice;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.Random;@RestController@RequestMapping("/api/verification")public class EmailVerificationController {    @Autowired    private EmailService emailService;    @Autowired    private VerificationCodeRepository verificationCodeRepository;    @PostMapping("/send-code")    public ResponseEntity<?> sendVerificationCode(@RequestBody EmailRequest request) {        try {            String email = request.getEmail();            if (!isValidGmailAddress(email)) {                return ResponseEntity.badRequest().body(new MessageResponse("Invalid Gmail address"));            }            String code = generateVerificationCode();            verificationCodeRepository.saveCode(email, code);            emailService.sendVerificationEmail(email, code);            return ResponseEntity.ok().body(new MessageResponse("Verification code sent"));        } catch (Exception e) {            e.printStackTrace();            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)                    .body(new MessageResponse("Error processing request"));        }    }    @PostMapping("/verify-code")    public ResponseEntity<?> verifyCode(@RequestBody VerificationRequest request) {        System.out.println("Verifying code for email: " + request.getEmail());        String storedCode = verificationCodeRepository.getCode(request.getEmail());        System.out.println("Stored code: " + storedCode + ", Received code: " + request.getCode());        if (storedCode != null && storedCode.equals(request.getCode())) {            verificationCodeRepository.removeCode(request.getEmail());            return ResponseEntity.ok().body(new MessageResponse("Email verified successfully"));        } else {            return ResponseEntity.badRequest().body(new MessageResponse("Invalid verification code"));        }    }    private String generateVerificationCode() {        return String.format("%06d", new Random().nextInt(999999));    }    private boolean isValidGmailAddress(String email) {        return email.matches("^[a-zA-Z0-9._%+-]+@gmail\\.com$");    }}